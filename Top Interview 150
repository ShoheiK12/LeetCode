# 88. Merge Sorted Array
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        # merge nums1 and nums2,and then sort it.
        merged_array = sorted(nums1[:m] + nums2)
    
        # the final sorted array
        for i in range(m + n):
            nums1[i] = merged_array[i]

# 27. Remove Element
class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        k = 0
        for i in range(len(nums)):
            if nums[i] != val:
                nums[k] = nums[i]
                k += 1
        return k

nums = [3,2,2,3]
val = 3
k = removeElement(nums, val)
print(nums[:k])

# 26. Remove Duplicates from Sorted Array
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # start with 1 because nums[0] is always unique
        i = 1

        for j in range(1, len(nums)):
            # check if nums[j] is unique to previous num
            if nums[j] != nums[j - 1]:
                nums[i] = nums[j]
                i += 1

        return i

nums = [1, 1, 2, 2, 3, 4, 4, 5]
solution = Solution()
k = solution.removeDuplicates(nums)

print("k =", k)
print("Updated nums =", nums[:k]) 

# 169. Majority Element
# Boyer-Moore Voting Algorithm
def majorityElement(nums):
    count = 0
    majority = None

    for num in nums:
        if count == 0:
            majority = num
        count += (1 if num == majority else -1)

    return majority
nums = [2,2,1,1,1,2,2,2]
majority = majorityElement(nums)
print(majority)
