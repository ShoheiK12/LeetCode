# 88. Merge Sorted Array
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        # merge nums1 and nums2,and then sort it.
        merged_array = sorted(nums1[:m] + nums2)
    
        # the final sorted array
        for i in range(m + n):
            nums1[i] = merged_array[i]

# 27. Remove Element
class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        k = 0
        for i in range(len(nums)):
            if nums[i] != val:
                nums[k] = nums[i]
                k += 1
        return k

nums = [3,2,2,3]
val = 3
k = removeElement(nums, val)
print(nums[:k])

# 26. Remove Duplicates from Sorted Array
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # start with 1 because nums[0] is always unique
        i = 1

        for j in range(1, len(nums)):
            # check if nums[j] is unique to previous num
            if nums[j] != nums[j - 1]:
                nums[i] = nums[j]
                i += 1

        return i

nums = [1, 1, 2, 2, 3, 4, 4, 5]
solution = Solution()
k = solution.removeDuplicates(nums)

print("k =", k)
print("Updated nums =", nums[:k]) 

# 169. Majority Element
# Boyer-Moore Voting Algorithm
def majorityElement(nums):
    count = 0
    majority = None

    for num in nums:
        if count == 0:
            majority = num
        count += (1 if num == majority else -1)

    return majority
nums = [2,2,1,1,1,2,2,2]
majority = majorityElement(nums)
print(majority)

# 121. Best Time to Buy and Sell Stock
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        min_price = float('inf')
        max_profit = 0

        for price in prices:
          # if price < min_price, update min_price
          if price < min_price:
            min_price = price
          # if price - min_price > max_profit, then update max_profit
          elif price - min_price > max_profit:
            max_profit = price - min_price

        return max_profit

prices = [7,1,5,3,6,4]

solution = Solution()

print(solution.maxProfit(prices))

# 13. Roman to Integer
class Solution(object):
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        roman_dict = {
            'I': 1,
            'V': 5,
            'X': 10,
            'L': 50,
            'C': 100,
            'D': 500,
            'M': 1000
        }

        total = 0
        prev_value = 0

        # check string backwards so that we can calculate easily.
        for char in reversed(s):
            value = roman_dict[char]
            # if value < prev_value, substarct
            if value < prev_value:
                total -= value
            # if value > prev_value, add and renew prev_value
            else:
                total += value
                prev_value = value

        return total

solution = Solution()
print(solution.romanToInt("III"))     
print(solution.romanToInt("IV"))      
print(solution.romanToInt("IX"))     
print(solution.romanToInt("LVIII"))  
print(solution.romanToInt("MCMXCIV")) 

# 58. Length of Last Word
class Solution(object):
    def lengthOfLastWord(self, s):
        """
        :type s: str
        :rtype: int
        """
        # split string with empty space
        words = s.split()
        # check only the length of the last word
        if words:
          length = len([char for char in words[-1]])
        # if string is empty, length is 0 (prevent IndexError)
        else:
          length = 0 

        return length 

solution = Solution()
print(solution.lengthOfLastWord("   fly me   to   the moon  "))  
